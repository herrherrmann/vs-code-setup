{
	"Function": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "fn",
		"body": ["function ${1:init}($2) {", "    $3", "}$4"],
		"description": "A plain JS function"
	},
	"Loggy": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "loggy",
		"body": ["console.log(`${1}: `, $1);$2"],
		"description": "Log variable (or whatever) including a label to console"
	},
	"Warny": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "warny",
		"body": ["console.warn(`${1}: `, $1);$2"],
		"description": "Log variable (or whatever) in warn mode to console"
	},
	"Errory": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "errory",
		"body": ["console.error(`${1}: `, $1);$2"],
		"description": "Log variable (or whatever) in error mode to console"
	},
	"Log": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "clog",
		"body": ["console.log($1);$2"],
		"description": "Log variable (or whatever) to console"
	},
	"Timer": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "timer",
		"body": [
			"console.time('${1:function}');",
			"console.timeEnd('${1:function}');$2"
		],
		"description": "Back to the future"
	},
	"Use a React className via styles": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "cN",
		"body": ["className={styles.$1}"],
		"description": "Use a React className via styles"
	},
	"Use a React className via classNames and styles": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "cNs",
		"body": ["className={classNames(styles.$1)}"],
		"description": "Use a React className via classNames and styles"
	},
	"Import React": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "import react",
		"body": ["import React from 'react';"],
		"description": "Import React module"
	},
	"Import classNames": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "import classNames",
		"body": ["import classNames from 'classnames';"],
		"description": "Import classNames module"
	},
	"Import Component's Less Styles": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "import styles (Less)",
		"body": ["import styles from './${1:styles.m}.less';"],
		"description": "Import Component's CSS Module (Less)"
	},
	"Import Component's Sass Styles": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "import styles (Sass)",
		"body": ["import styles from './${1:styles.m}.scss';"],
		"description": "Import Component's CSS Module (Sass)"
	},
	"rel noopener noreferrer": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "rel",
		"body": ["rel=\"noopener noreferrer\""],
		"description": "Secure that link"
	},
	"export default": {
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"prefix": "ed",
		"body": ["export default ${TM_SELECTED_TEXT};$2"],
		"description": "export default"
	},
	"styled React Component": {
		"prefix": "styled-component",
		"scope": "typescript,typescriptreact",
		"body": [
			"const ${1:StyledComponent} = styled${2:.div${3:<$4>}}(({ theme }) => ({",
			"\t$5",
			"}))"
		]
	},
	"styled React Component (without theme)": {
		"prefix": "styled-component-without-theme",
		"scope": "typescript,typescriptreact",
		"body": ["const ${1:StyledComponent} = styled${2:.div}({", "\t$3", "})$4"]
	},
	"React Component (TypeScript)": {
		"prefix": "component",
		"scope": "typescript,typescriptreact",
		"body": [
			"import React from 'react';",
			"import styles from './styles.module.scss';",
			"",
			"type Props = {$2$3};",
			"",
			"export default function ${1:MyComponent}({ $2 }: Props) {",
			"    return <>$4</>;",
			"}$5"
		],
		"description": "A React functional component"
	},
	"margin template with all directions": {
		"prefix": "margin",
		"scope": "typescript,typescriptreact",
		"body": "margin: `0 0 0 0`,"
	},
	"Test specification": {
		"prefix": "describe",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"describe('${1:myFunction()}', () => {",
			"\ttest('${2:does something}', () => {",
			"\t\tconst actual = ${3:doSomething()}",
			"\t\tconst expected = ${4:true}",
			"\t\texpect(actual).toBe(expected)",
			"\t})",
			"})"
		]
	}
}
